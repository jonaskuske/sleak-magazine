{"version":3,"sources":["src/utils/index.js","src/team.js"],"names":["wait","time","Promise","resolve","setTimeout","throwError","err","Error","$","document","querySelector","bind","$$","selector","querySelectorAll","debounce","fn","timeout","args","clearTimeout","apply","specialMessages","Map","logSpecialMessage","name","has","console","log","get","delete","updateHash","hash","history","replaceState","title","startObserver","teamMemberImages","teamObserver","IntersectionObserver","entries","forEach","target","isIntersecting","article","closest","id","classList","add","rootMargin","observeTeamMember","observe","window","onload"],"mappings":";AA0EO,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,SAAA,QAAA,GAAA,QAAA,EAAA,QAAA,WAAA,QAAA,UAAA,EAtEA,IAAMA,EAAO,SAAAC,GAAQ,OAAA,IAAIC,QAAQ,SAAAC,GAAWC,OAAAA,WAAWD,EAASF,MAsEhE,QAAA,KAAA,EAhEA,IAAMI,EAAa,SAAAC,GAClBC,MAAAA,MAAMD,IA+DP,QAAA,WAAA,EAtDA,IAAME,EAAIC,SAASC,cAAcC,KAAKF,UAsDtC,QAAA,EAAA,EAhDA,IAAMG,EAAK,SAAAC,GAAgBJ,OAAAA,EAAAA,SAASK,iBAAiBD,KAgDrD,QAAA,GAAA,EAzCA,IAAME,EAAW,SAACC,GAAIhB,IACvBiB,EADuBjB,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAG3B,OAAA,WAAYkB,IAAM,IAAA,EAAA,KAANA,EAAAA,UAAAA,OAAAA,EAAM,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAANA,EAAM,GAAA,UAAA,GAKvBC,aAAaF,GACbA,EAAUb,WALI,WACZa,EAAU,KACVD,EAAGI,MAAM,EAAMF,IAGWlB,KAgCzB,QAAA,SAAA,EA3BP,IAAMqB,EAAkB,IAAIC,IAAI,CAE9B,CAAC,sCAF6B,gCAG9B,CAAC,4BAH6B,sCAI9B,CAAC,kBAJ6B,4CAK9B,CAAC,gBAL6B,oCAM9B,CAAC,oBAN6B,iBAO9B,CACE,gCAR4B,gDAY9B,CAAC,QAAS,6BACV,CAAC,MAAO,mCAGJC,EAAoB,SAAAC,GACnBH,EAAgBI,IAAID,KAEzBE,QAAQC,IAASN,KAAAA,OAAAA,EAAgBO,IAAIJ,KAErCH,EAAgBQ,OAAOL,KAMZM,EAAaf,EAAS,SAAAgB,GAC7BC,QAAQC,eACVV,EAAkBQ,GAClBC,QAAQC,aAAa,KAAMxB,SAASyB,MAAWH,IAAAA,OAAAA,MAEhD,KALI,QAAA,WAAA;;AChDP,aA1BA,IAAA,EAAA,QAAA,WAGMI,EAAgB,WACdC,IAAAA,GAAmB,EAAG,EAAA,IAAA,wBAetBC,EAAe,IAAIC,qBAZE,SAAAC,GACzBA,EAAQC,QAAQ,SAAgC,GAA7BC,IAAAA,EAAAA,EAAAA,OACbC,GADqBA,EAAAA,eACL,CACZC,IAAAA,EAAUF,EAAOG,QAAQ,YAEpBD,EAAAA,EAAAA,YAAAA,EAAQE,IAEnBF,EAAQG,UAAUC,IAAI,kBARZ,CAAEC,WAAU,aActBC,EAAoBZ,EAAaa,QAAQvC,KAAK0B,GAEpDD,EAAiBI,QAAQS,IAI3BE,OAAOC,OAASjB","file":"team.0ab79747.map","sourceRoot":"..","sourcesContent":["/**\r\n * Returns a Promise which resolves after a given time\r\n * @param {number} time Time until Promise resolves\r\n */\r\nexport const wait = time => new Promise(resolve => setTimeout(resolve, time));\r\n\r\n/**\r\n * Throws an error with a given error message\r\n * @param {string} err Fehlermeldung\r\n */\r\nexport const throwError = err => {\r\n  throw Error(err);\r\n};\r\n\r\n/**\r\n * Alias for querySelector(), takes CSS selctor and returns HTML element or null\r\n * @type {Function}\r\n * @param {string} selector CSS3 Selektor\r\n * @returns {HTMLElement|null} Element oder Array aus Elementen\r\n */\r\nexport const $ = document.querySelector.bind(document);\r\n/**\r\n * Wrapper for querySelectorAll(), returns Array instead of NodeList\r\n * @param {string} selector CSS3 Selektor\r\n * @returns {Array<HTMLElement>} Array aus gefundenen Elementen\r\n */\r\nexport const $$ = selector => [...document.querySelectorAll(selector)];\r\n\r\n/**\r\n * Executes a given function only after it wasn't called again for some time\r\n * @param {Function} fn Funktion, die debounced werden soll\r\n * @param {number} wait Zeit, die vergangen sein muss bevor fn ausgeführt wird\r\n */\r\nexport const debounce = (fn, wait = 0) => {\r\n  let timeout;\r\n\r\n  return function(...args) {\r\n    const later = () => {\r\n      timeout = null;\r\n      fn.apply(this, args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n};\r\n\r\n/* --- Easteregg-ish stuff --- */\r\nconst specialMessages = new Map([\r\n  // Artikel:\r\n  ['zwischen-seemannsgarn-und-strandgut', `🍺 Kneipentour, for science.`],\r\n  ['bringt-farbe-in-die-stadt', `⚽ Abenteuer in den Graffitiburgen.`],\r\n  ['film-ab-bheaven', `🛰 Doch gab es die Mondlandung wirklich?`],\r\n  ['back-to-print', `🍪 Aber Print hat keine Cookies.`],\r\n  ['projekt-antarktis', `🐧 Pengwings.`],\r\n  [\r\n    'wie-ki-die-designwelt-aendert',\r\n    `🔴 I'm afraid I can't let you do that, Dave.`,\r\n  ],\r\n  // Team\r\n  ['jonas', '✔ Perfekt, trotz Serifen.'],\r\n  ['max', '✔ Ist Photoshop, nicht Paint.'],\r\n]);\r\n\r\nconst logSpecialMessage = name => {\r\n  if (!specialMessages.has(name)) return;\r\n\r\n  console.log(`\\n${specialMessages.get(name)}`);\r\n  // Delete, so messages are only logged once\r\n  specialMessages.delete(name);\r\n};\r\n/* --- --- */\r\n\r\n// Updates URL hash without triggering hashchange by using history.replaceState\r\n// Debounced, so updates can only happen every 500ms\r\nexport const updateHash = debounce(hash => {\r\n  if (history.replaceState) {\r\n    logSpecialMessage(hash);\r\n    history.replaceState(null, document.title, `#${hash}`);\r\n  }\r\n}, 500);\r\n","import { $$, updateHash } from './utils';\r\n\r\n// Observe the team member pages and transition them in when scrolled into view\r\nconst startObserver = () => {\r\n  const teamMemberImages = $$('article .team__image');\r\n\r\n  const options = { rootMargin: `-1px 0px` };\r\n  const handleIntersection = entries => {\r\n    entries.forEach(({ target, isIntersecting }) => {\r\n      if (isIntersecting) {\r\n        const article = target.closest('article');\r\n        // Update the URL hash to reflect current position on the page\r\n        updateHash(article.id);\r\n        // Transition in the team member that was scrolled into view\r\n        article.classList.add('show-image');\r\n      }\r\n    });\r\n  };\r\n\r\n  const teamObserver = new IntersectionObserver(handleIntersection, options);\r\n  const observeTeamMember = teamObserver.observe.bind(teamObserver);\r\n\r\n  teamMemberImages.forEach(observeTeamMember);\r\n};\r\n\r\n// Go!\r\nwindow.onload = startObserver;\r\n"]}